# Generated by Django 2.1.4 on 2020-03-03 09:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tickets.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(blank=True, max_length=32, verbose_name='姓名')),
                ('mobile', models.CharField(blank=True, max_length=32, verbose_name='手机')),
                ('department', models.CharField(blank=True, max_length=32, verbose_name='部门')),
                ('job', models.CharField(blank=True, max_length=32, verbose_name='职位')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('leader', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='上级')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, verbose_name='名称')),
                ('content', models.BinaryField(default=0, verbose_name='文件内容')),
            ],
            options={
                'verbose_name': '附件',
                'verbose_name_plural': '附件',
            },
        ),
        migrations.CreateModel(
            name='ConsumerOrderApply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, help_text='唯一标识', max_length=64, verbose_name='用户账号')),
                ('oa_number', models.CharField(blank=True, help_text='用户申请使用生产系统的产品，需要先签订合同，并OA审批通过', max_length=128, verbose_name='协议OA审批编号')),
                ('contract_status', models.CharField(blank=True, help_text='审批通过，才能申请订单', max_length=32, verbose_name='合同状态')),
                ('user_department', models.CharField(blank=True, help_text='主要是配置必要的辅助信息，用于对账，内部用户必填', max_length=128, verbose_name='用户部门')),
                ('user_project', models.CharField(blank=True, help_text='内部用户必填', max_length=128, verbose_name='用户项目')),
                ('user_product', models.CharField(blank=True, help_text='内部用户必填', max_length=128, verbose_name='用户产品')),
                ('related_products', models.CharField(blank=True, help_text='多个产品以逗号分隔', max_length=256, verbose_name='用户关联产品编码')),
                ('test_count', models.IntegerField(default=5, help_text='默认5条', verbose_name='生产接入测试条数')),
                ('description', models.TextField(blank=True, help_text='可以描述附加的需求', verbose_name='描述')),
            ],
            options={
                'verbose_name': '用户订单申请',
                'verbose_name_plural': '用户订单申请',
            },
            bases=(tickets.models.ApplyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ConsumerRegisterApply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='一般是中文', max_length=64, verbose_name='用户名称')),
                ('username', models.CharField(blank=True, help_text='唯一标识对该用户授权访问的一个访问通道编码。编码规则：机构中文全拼缩写（小写 ）+ 4位16进制随机编码，由业务输入系统 （系统应具备验证用户名唯一性功能）。用户账号由业务生成，生成的过程中，能够校验账号的唯一性', max_length=64, verbose_name='用户账号')),
                ('category', models.IntegerField(default=0, help_text='1 内部用户； 2 外部用户', verbose_name='用户类型')),
                ('org_name_zh', models.CharField(blank=True, help_text='必填', max_length=256, verbose_name='机构中文名称')),
                ('org_name_en', models.CharField(blank=True, help_text='可以为空', max_length=256, verbose_name='机构英文名称')),
                ('org_number', models.CharField(blank=True, help_text='必填，用于客户业务校核，客户的中英文名称应该与社会统一信用代码一致', max_length=128, verbose_name='社会统一信用代码/组织机构代码')),
                ('org_address', models.CharField(blank=True, help_text='可以为空', max_length=256, verbose_name='机构地址')),
                ('server_ips', models.CharField(blank=True, help_text='用于配置白名单，多个IP以逗号分隔', max_length=128, verbose_name='服务器IP')),
                ('contact_person', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='联系人')),
                ('contact_mobile', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='联系人手机')),
                ('contact_email', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='联系人邮箱')),
                ('score', models.IntegerField(default=0, help_text='评分分为1~5分，最开始进入系统都为0分', verbose_name='评分')),
                ('risk', models.IntegerField(default=0, help_text='风险分为1~5级，最开始进入系统都为0级，没有风险', verbose_name='风险')),
                ('communication', models.TextField(blank=True, help_text='与供应商沟通后，特别需要关注的问题', verbose_name='沟通记录')),
                ('industry', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='所属行业')),
                ('description', models.TextField(blank=True, help_text='可以描述附加的需求', verbose_name='描述')),
            ],
            options={
                'verbose_name': '用户注册申请',
                'verbose_name_plural': '用户注册申请',
            },
            bases=(tickets.models.ApplyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ConsumerTrialApply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, help_text='唯一标识对该用户授权访问的一个访问通道编码。编码规则：机构中文全拼缩写（小写 ）+ 4位16进制随机编码，由业务输入系统 （系统应具备验证用户名唯一性功能）。用户账号由业务生成，生成的过程中，能够校验账号的唯一性', max_length=64, verbose_name='用户账号')),
                ('oa_number', models.CharField(blank=True, help_text='可以为空', max_length=128, verbose_name='协议OA审批编号')),
                ('user_department', models.CharField(blank=True, help_text='主要是配置必要的辅助信息，用于对账，内部用户必填', max_length=128, verbose_name='用户部门')),
                ('user_project', models.CharField(blank=True, help_text='内部用户必填', max_length=128, verbose_name='用户项目')),
                ('user_product', models.CharField(blank=True, help_text='内部用户必填', max_length=128, verbose_name='用户产品')),
                ('test_count', models.IntegerField(default=100, help_text='默认测试100条', verbose_name='测试条数')),
                ('related_products', models.CharField(blank=True, help_text='多个产品以逗号分隔', max_length=256, verbose_name='用户关联产品编码')),
                ('description', models.TextField(blank=True, help_text='可以描述附加的需求', verbose_name='描述')),
            ],
            options={
                'verbose_name': '用户测试申请',
                'verbose_name_plural': '用户测试申请',
            },
            bases=(tickets.models.ApplyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProductLaunchApply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_number', models.CharField(blank=True, help_text='唯一标识', max_length=64, verbose_name='产品编号')),
                ('product_name', models.CharField(blank=True, help_text='必填', max_length=128, verbose_name='产品名称')),
                ('source_numbers', models.CharField(blank=True, help_text='必填，来自第三方API接入或者内部开发数据源，多个数据源以逗号分隔', max_length=256, verbose_name='数据源编码')),
                ('manager_name', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='产品经理姓名')),
                ('manager_mobile', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='产品经理手机号码')),
                ('manager_email', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='产品经理邮箱')),
                ('use_cache', models.BooleanField(default=False, help_text='必填，是否使用缓存热数据返回用户', verbose_name='是否缓存')),
                ('cache_ms', models.IntegerField(default=0, help_text='必填', verbose_name='缓存时间（毫秒）')),
                ('timeout_ms', models.IntegerField(default=0, help_text='必填', verbose_name='超时时间（毫秒）')),
                ('alarm_total_count', models.IntegerField(default=0, help_text='必填，报警累计次数', verbose_name='报警总观测次数')),
                ('alarm_fail_count', models.IntegerField(default=0, help_text='必填，失败几次开始报警', verbose_name='失败数报警阀值')),
                ('alarm_timeout_count', models.IntegerField(default=0, help_text='必填', verbose_name='超时报警阀值')),
                ('params_in', models.TextField(blank=True, default='{}', help_text='必填', verbose_name='入参')),
                ('params_in_sensitive', models.TextField(blank=True, default='{}', help_text='必填', verbose_name='入参敏感字段')),
                ('params_out_sensitive', models.TextField(blank=True, default='{}', help_text='必填', verbose_name='出参敏感字段')),
                ('remark', models.TextField(blank=True, help_text='可以为空，补充信息', verbose_name='备注')),
            ],
            options={
                'verbose_name': '产品上线申请',
                'verbose_name_plural': '产品上线申请',
            },
            bases=(tickets.models.ApplyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, help_text='唯一标识', max_length=128, unique=True, verbose_name='工单号')),
                ('relate_code', models.CharField(blank=True, help_text='系统自动生成，用于绑定申请记录', max_length=128, verbose_name='关联代码')),
                ('title', models.CharField(blank=True, max_length=128, verbose_name='任务主题')),
                ('status', models.CharField(blank=True, help_text='审批中/通过/驳回/撤回/已生效/归档', max_length=32, verbose_name='工单状态')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('applicant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applicant_ticket_set', to=settings.AUTH_USER_MODEL, verbose_name='申请人')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_ticket_set', to=settings.AUTH_USER_MODEL, verbose_name='真实创建者')),
                ('maintainer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='maintainer_ticket_set', to=settings.AUTH_USER_MODEL, verbose_name='关系维护人')),
            ],
            options={
                'verbose_name': '工单',
                'verbose_name_plural': '工单',
            },
        ),
        migrations.CreateModel(
            name='TicketFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.IntegerField(default=0, verbose_name='流程次序')),
                ('handler_name', models.CharField(blank=True, max_length=32, verbose_name='审批人')),
                ('result', models.CharField(blank=True, help_text='通过/驳回', max_length=32, verbose_name='审批结果')),
                ('content', models.TextField(blank=True, verbose_name='审批意见')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.Ticket', verbose_name='工单')),
            ],
            options={
                'verbose_name': '工单审批记录',
                'verbose_name_plural': '工单审批记录',
            },
        ),
        migrations.CreateModel(
            name='VendorApiApply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_code', models.CharField(blank=True, help_text='供应商的唯一标识。编码规则：机构中文全拼缩写（小写 ）+ 4位16进制随机编码，由业务输入系统 （系统应具备验证用户名唯一性功能）。用户账号由业务生成，生成的过程中，能够校验账号的唯一性。该账号也是供应商访问日志的登录账号', max_length=64, verbose_name='机构编码')),
                ('product_name', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='产品名称')),
                ('api_code', models.CharField(blank=True, help_text='必填，满足数据源编码规范，参考《数据产品编码规范》', max_length=64, verbose_name='API编码')),
                ('product_description', models.CharField(blank=True, help_text='必填，产品描述', max_length=64, verbose_name='产品定义')),
                ('api_url', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='API访问URL')),
                ('params_in', models.TextField(blank=True, default='{}', help_text='必填，json 结构体', verbose_name='入参')),
                ('params_in_sensitive', models.TextField(blank=True, help_text='必填，多个字段用逗号分隔', verbose_name='入参敏感字段')),
                ('params_out_sensitive', models.TextField(blank=True, help_text='必填，多个字段用逗号分隔', verbose_name='出参敏感字段')),
                ('use_cache', models.BooleanField(default=False, help_text='必填，是否使用缓存热数据返回用户', verbose_name='是否缓存')),
                ('cache_ms', models.IntegerField(default=0, help_text='必填', verbose_name='缓存时间/毫秒')),
                ('timeout_ms', models.IntegerField(default=0, help_text='必填', verbose_name='超时时间/毫秒')),
                ('field', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='使用领域')),
                ('alarm_total_count', models.IntegerField(default=0, help_text='必填，报警累计次数', verbose_name='报警总观测次数')),
                ('alarm_fail_count', models.IntegerField(default=0, help_text='必填，失败几次开始报警', verbose_name='失败数报警阀值')),
                ('alarm_timeout_count', models.IntegerField(default=0, help_text='必填', verbose_name='超时报警阀值')),
                ('start', models.CharField(blank=True, help_text='API合同生效时间', max_length=64, verbose_name='开始时间')),
                ('send', models.CharField(blank=True, help_text='API合同结束时间', max_length=64, verbose_name='结束时间')),
                ('version', models.CharField(blank=True, help_text='必填，API目前注册版本号', max_length=64, verbose_name='版本号')),
                ('remark', models.TextField(blank=True, help_text='可以为空，补充信息', verbose_name='备注')),
            ],
            options={
                'verbose_name': '第三方供应商API接入申请',
                'verbose_name_plural': '第三方供应商API接入申请',
            },
            bases=(tickets.models.ApplyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VendorApply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_code', models.CharField(blank=True, help_text='供应商的唯一标识。编码规则：机构中文全拼缩写（小写 ）+ 4位16进制随机编码，由业务输入系统 （系统应具备验证用户名唯一性功能）。用户账号由业务生成，生成的过程中，能够校验账号的唯一性。该账号也是供应商访问日志的登录账号', max_length=64, verbose_name='机构编码')),
                ('org_name_zh', models.CharField(blank=True, help_text='如：白骑士，机构名称全局唯一，如果系统有多个相同名称，应该以序号自动区分。', max_length=64, verbose_name='机构中文名称')),
                ('org_number', models.CharField(blank=True, help_text='必须，用于客户业务校核，客户的中文名称应该与社会统一信用代码一致 ', max_length=64, verbose_name='机构社会统一信用编码')),
                ('contact_person', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='联系人')),
                ('contact_mobile', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='联系人手机号码')),
                ('contact_email', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='联系人邮箱')),
                ('org_address', models.CharField(blank=True, help_text='可以为空', max_length=256, verbose_name='机构地址')),
                ('score', models.IntegerField(default=0, help_text='评分分为1~5分，最开始进入系统都为0分', verbose_name='评分')),
                ('risk', models.IntegerField(default=0, help_text='风险分为1~5级，最开始进入系统都为0级，没有风险', verbose_name='风险')),
                ('communication', models.TextField(blank=True, help_text='与供应商沟通后，特别需要关注的问题', verbose_name='沟通记录')),
                ('industry', models.CharField(blank=True, help_text='必填', max_length=64, verbose_name='所属行业')),
                ('description', models.TextField(blank=True, help_text='可以描述附加的需求', verbose_name='描述')),
            ],
            options={
                'verbose_name': '第三方供应商注册申请',
                'verbose_name_plural': '第三方供应商注册申请',
            },
            bases=(tickets.models.ApplyMixin, models.Model),
        ),
        migrations.AddField(
            model_name='attachment',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.Ticket', verbose_name='工单'),
        ),
    ]
